<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Hubtel.Interview.Assignment.UserWallet</name>
    </assembly>
    <members>
        <member name="M:Hubtel.Interview.Assignment.UserWallet.Controllers.WalletController.CreateNewWalletAsync(Hubtel.Interview.Assignment.UserWallet.Dtos.WalletModelDto)">
             <summary>
                 This creates a new wallet for the user.
             </summary>
             <remarks>
                 All the properties for creating a valid wallet object are required.\
                 Here is a sample object.
                 
                 {\
                     "Name" : "Test wallet",\
                     "Type" : "momo",\
                     "AccountNumber" : "0782673654",\
                     "AccountScheme" : "mtn",\
                     "CreatedAt" : "2024-11-26T14:01:25.203Z",\
                     "Owner" : "0782576847"\
                 }
                 
                 Owner should be a valid phone number\
                 The following are the valid values for Account Scheme [visa, mastercard, aireteltigo, vodafone, mtn]. \
                 The following are the valid values for Type [momo, card].
                 
                 The following will result into a bad request response.
                 
                 Account scheme provided is not any of the above schemes\
                 Wallet Type provided is not any of the above types,\
                 Account scheme does not match with the account type ie specified wallet Type as momo and provide a scheme of visa\
                 You are trying to create a duplicate wallet\
                 you are trying to create more than five wallets
                 
                 This method also returns an internal server error if something went wrong on the server side. So you may try again\
                 If all goes well, an id for the wallet created is returned with a server status of Created.\
                 For quick reference, it is better to store the id for future actions like deleting or getting it.
            
             </remarks>
             <param name="walletModelDto"></param>
             <returns>The id of the newly created wallet</returns>
        </member>
        <member name="M:Hubtel.Interview.Assignment.UserWallet.Controllers.WalletController.GetWalletByIdAsync(System.String)">
            <summary>
                You can use this to get a single wallet using a wallet id
            </summary>
            <remarks>
                A wallet id is required to get a wallet from the server\
                If a wallet with the wallet id provided was not found, you recieve not found response.\
                An internal servier error may be returned if something went wrong on the server side, you can still try again
            </remarks>
            <param name="walletId"></param>
            <returns>An object of the wallet with the provided id</returns>
        </member>
        <member name="M:Hubtel.Interview.Assignment.UserWallet.Controllers.WalletController.GetAllWalletsAsync(System.String)">
            <summary>
            This fetches all wallets for a single owner.
            </summary>
            <remarks>
                A phone number for the owner is required to identify whose wallets to return.\
                A not found response could be returned if the phone number provided is not associated with any stored wallet.\
                An internal server error could be returned if something goes wrong on the server side.
            </remarks>
            <param name="ownerPhoneNumber"></param>
            <returns>A list of wallets related to the provided phone  number</returns>
        </member>
        <member name="M:Hubtel.Interview.Assignment.UserWallet.Controllers.WalletController.RemoveWalletAsync(System.String)">
            <summary>
            This deletes a wallets.
            </summary>
            <remarks>
                The wallet associated with the provided id will be permanently deleted.\
                A wallet id is got at the time of creating a wallet. \
                After creating a wallet, it is best to store that id for future use.\
                However, if you get all wallets with the owner's phone number, you can be able to obtain the ids.\
                If no wallet was found with the provided id, a not found response is returned.\
            </remarks>
            <param name="walletId"></param>
            <returns></returns>
        </member>
        <member name="T:Hubtel.Interview.Assignment.UserWallet.ErrorHandlers.BaseErrorHandler`2">
            <summary>
            This class is a base class for error handlers.
            Errors returned from the repository class are related to real wallet model,
            yet the controller only know about wallet dtos.
            
            Therefore, <typeparamref name="TInput"/> represents the type of error from the repository, which is changed
            to a type of error passed in as <typeparamref name="TOutput"/>
            
            forexample, BadRequestWalletOperationResult of type wallet model, would be changed to 
            BadRequestWalletOperationResult of type wallet dto which the controller understands.
            </summary>
            <typeparam name="TInput"></typeparam>
            <typeparam name="TOutput"></typeparam>
        </member>
        <member name="T:Hubtel.Interview.Assignment.UserWallet.ErrorHandlers.ErrorHandlerChainBuilder`2">
            <summary>
            Builds a chain of error handlers that call each other untill the error is handled by the right handler.
            </summary>
            <typeparam name="TInput"></typeparam>
            <typeparam name="TOutput"></typeparam>
        </member>
        <member name="T:Hubtel.Interview.Assignment.UserWallet.ErrorHandlers.ErrorHandlerStrategyFactory">
            <summary>
            This class is used by the wallet service to pick an error handling strategy from the inbuilt service provider at runtime.
            Error handling strategy tells how to change a particular error from one type to a new one.
            forexample 
            if the wallet Repository returns an error of type WalletModel, 
            An error handling strategy can tell us to change that type into an error of type wallet dto.
            This error can be NotFound, Bad request, but related to wallet model as its type from the repository.
            So the strategy knows how to transform this error into an error understood by the controller
            
            Error handling strategy is made up of a chain of error handlers typed in the same way but different by names of errors.
            forexample if we request for data using an id, 
            the error might be notFound, badRequest, or any other error, but related to maybe a wallet model
            So the handler strategy chain is ready to handle any single of the above errors and transform to the relevant type. 
            for more info check on the Error handler chain builder class.
            
            A chain of error handlers of a particular type must be registered in the service provider in program.cs
            for this class to pick them up using the get strategy method when requested for.
            If there is a new type of error discovered, you need to Create a new class for that error,
            Create a new handler for it that inherits from the BaseErrorHandler abstract class,
            Then update the Error Handler Chain buider class which is a straight forward process,
            For more details, have a look at the program.cs and the ErrorHandler chain builder to see how error handler chains are created and registered
            
            </summary>
        </member>
        <member name="T:Hubtel.Interview.Assignment.UserWallet.ErrorHandlers.IErrorHandler`2">
            <summary>
            Represents a class that
            Recieves an error of type <typeparamref name="TInput"/>
            and changes it to an error of type <typeparamref name="TOutput"/>
            </summary>
            <typeparam name="TInput"></typeparam>
            <typeparam name="TOutput"></typeparam>
        </member>
    </members>
</doc>
